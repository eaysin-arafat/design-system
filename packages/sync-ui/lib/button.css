/*=============================================
=            #Variables                      =
=============================================*/
/**
* TABLE OF CONTENTS
*
* COLORS
* Brand colors........These are the main brand colors. They will be used the most
* Neutral colors......White and black, gray scale, secondary colors.
* Utility colors......Other colors to represent states: info, warning, success, etc.
*
* TYPOGRAPHY
* Font families.......The fonts used in the design system.
* Font weights........Font weights
* Sizes...............Font sizing for body text, paragraphs, inputs
* Heading sizes.......Font sizing for page headings
*
* BREAKPOINTS
* Breakpoints.........Global responsive breakpoints definitions.
*
* MARGIN
* Margin..............Global fixed set of margin variables
*
* PADDING
* Padding..............Global fixed set of padding variables
*
* SPACING
* Spacing..............Global fixed set of spacing variables
*
* SHADOW
* Shadow...............Global fixed set of shadow variables
*
* BORDER
* Border...............Global fixed set of border variables
*/
/*----------  COLORS  ----------*/
/* Brand colors */
/* Neutral colors */
/* Utility colors */
/*----------  TYPOGRAPHY  ----------*/
/**
 *
 * 1) The playfair font. We'll use this for headings mostly.
 *    https://fonts.google.com/specimen/Playfair+Display
 *
 * 2) The raleway font. We'll use this for the body text.
 *    https://fonts.google.com/specimen/Raleway
 *
 */
/* Font families */
/* Font weights */
/* Font Sizes */
/* Heading sizes */
/*----------  BREAKPOINTS  ----------*/
/* Breakpoints */
/*----------  MARGIN  ----------*/
/*----------  PADDING  ----------*/
/*----------  SPACING  ----------*/
/* Spacing */
/*----------  SHADOW  ----------*/
/* Shadow */
/*=============================================
=            Foundation Colors               =
=============================================*/
/**
 * This file defines the foundational color variables used throughout the design system.
 * These colors default to the palette defined in `variables.scss`. Developers can
 * override these defaults with their own variables.
 */
/*----------  Global Text Colors  ----------*/
/**
 * Text color for body content and background color.
 * These variables can be overridden by defining custom CSS variables.
 */
/*----------  Link Colors  ----------*/
/**
 * Link color settings, including hover and visited states.
 */
/*----------  Border Colors  ----------*/
/**
 * Border colors for various UI elements.
 */
/*----------  Button Colors  ----------*/
/**
 * Primary button colors including text color, background color, and hover background color.
 */
/*----------  Form Elements  ----------*/
/**
 * Form element colors including borders, backgrounds, and state colors.
 */
/*----------  Shadows  ----------*/
/**
 * Shadow styles for elements such as cards, modals, and buttons.
 */
/*----------  State Colors  ----------*/
/**
 * Colors for UI states such as hover, active, and disabled.
 */
/*----------  Background Colors  ----------*/
/**
 * General background colors for various components.
 */
/*----------  Text Color States  ----------*/
/**
 * Text colors for different states like success, error, and info.
 */
/*----------  End of Foundation Colors  ----------*/
/*=============================================
=            Foundation Typography           =
=============================================*/
/**
 * This file defines the typography settings for the design system,
 * including font families, font sizes, font weights, and line heights.
 */
/*----------  Font Families  ----------*/
/*----------  Text Color  ----------*/
/*----------  Font Sizes  ----------*/
/*----------  Font Weights  ----------*/
/*----------  Line Heights  ----------*/
/*----------  Letter Spacing  ----------*/
/*----------  Text Transformations  ----------*/
/*=====  End of Section comment block  ======*/
/*=============================================
=            Essential SCSS Mixins            =
=============================================*/
/*----------  Responsive Typography  ----------*/
/**
 * Mixin for responsive font sizes that scale between two breakpoints.
 * @param {number} $min-size - Font size at the smallest breakpoint.
 * @param {number} $max-size - Font size at the largest breakpoint.
 * @param {number} $min-width - Smallest viewport width.
 * @param {number} $max-width - Largest viewport width.
 */
/*----------  Media Queries  ----------*/
/**
 * Mixin for media queries.
 * Allows for easier and more readable media queries.
 * @param {string} $breakpoint - The breakpoint for the media query.
 */
/*----------  Padding  ----------*/
/*----------  Margin  ----------*/
/*----------  Flexbox Layouts  ----------*/
/**
 * Mixin for flexbox container.
 * Provides shorthand for common flexbox properties.
 * @param {string} $direction - Flex direction (row, column, etc.).
 * @param {string} $justify - Justify content (flex-start, center, etc.).
 * @param {string} $align - Align items (stretch, center, etc.).
 * @param {string} $wrap - Flex wrap (nowrap, wrap, etc.).
 */
/**
 * Mixin for flexbox item.
 * Provides shorthand for common flexbox item properties.
 * @param {number|string} $grow - Flex grow (0, 1, etc.).
 * @param {number|string} $shrink - Flex shrink (0, 1, etc.).
 * @param {string} $basis - Flex basis (auto, 100px, etc.).
 */
/*----------  Centering Elements  ----------*/
/**
 * Mixin for centering elements horizontally and vertically using flexbox.
 * Can be applied to a flex container.
 */
/**
 * Mixin for absolute centering.
 * Centers an element absolutely within its container.
 */
/*----------  Clearfix  ----------*/
/**
 * Mixin for clearfix.
 * Ensures that a container clears its floated children.
 */
/*----------  Transition  ----------*/
/**
 * Mixin for applying smooth transitions.
 * Provides shorthand for transition properties.
 * @param {string} $property - CSS property to transition.
 * @param {string} $duration - Duration of the transition (e.g., 0.3s).
 * @param {string} $timing - Timing function (e.g., ease, linear).
 * @param {string} $delay - Delay before the transition starts.
 */
/*----------  Text Ellipsis  ----------*/
/**
 * Mixin for applying text ellipsis.
 * Ensures that overflowing text is truncated with an ellipsis.
 */
/*----------  Aspect Ratio  ----------*/
/**
 * Mixin for maintaining aspect ratio of an element.
 * Provides a way to create elements with a specific aspect ratio.
 * @param {number} $width - Width of the aspect ratio (e.g., 16).
 * @param {number} $height - Height of the aspect ratio (e.g., 9).
 */
/*----------  Box Shadow  ----------*/
/**
 * Mixin for applying box shadow.
 * Provides shorthand for box-shadow properties.
 * @param {string} $x-offset - Horizontal offset of the shadow.
 * @param {string} $y-offset - Vertical offset of the shadow.
 * @param {string} $blur-radius - Blur radius of the shadow.
 * @param {string} $spread-radius - Spread radius of the shadow.
 * @param {string} $color - Color of the shadow.
 */
/*=============================================
=            End of Essential Mixins          =
=============================================*/
/*=============================================
=            Atomic Styles                   =
=============================================*/
/*----------  General Styles  ----------*/
body {
  font-family: var(--su-body-font-family, "Helvetica, Arial, sans-serif");
  font-size: var(--su-body-font-size, 16px);
  line-height: var(--su-body-line-height, 1.5);
  letter-spacing: var(--su-body-letter-spacing, 0.02em);
  color: #000000;
  background-color: var(--su-body-bg-color, #ffffff);
  margin: 0;
  padding: 0;
}

/*----------  Headings  ----------*/
h1 {
  font-size: var(--su-h1-font-size, 2.5rem);
  font-weight: var(--su-h1-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h1-line-height, 1.2);
  letter-spacing: var(--su-h1-letter-spacing, -0.02em);
  text-transform: var(--su-h1-text-transform, uppercase);
  margin: 0;
}

h2 {
  font-size: var(--su-h2-font-size, 2rem);
  font-weight: var(--su-h2-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h2-line-height, 1.3);
  letter-spacing: var(--su-h2-letter-spacing, -0.015em);
  text-transform: var(--su-h2-text-transform, none);
  margin: 0;
}

h3 {
  font-size: var(--su-h3-font-size, 1.75rem);
  font-weight: var(--su-h3-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h3-line-height, 1.4);
  letter-spacing: var(--su-h3-letter-spacing, -0.01em);
  text-transform: var(--su-h3-text-transform, none);
  margin: 0;
}

h4 {
  font-size: var(--su-h4-font-size, 1.5rem);
  font-weight: var(--su-h4-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h4-line-height, 1.5);
  letter-spacing: var(--su-h4-letter-spacing, 0em);
  text-transform: var(--su-h4-text-transform, none);
  margin: 0;
}

h5 {
  font-size: var(--su-h5-font-size, 1.25rem);
  font-weight: var(--su-h5-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h5-line-height, 1.6);
  letter-spacing: var(--su-h5-letter-spacing, 0.01em);
  text-transform: var(--su-h5-text-transform, none);
  margin: 0;
}

h6 {
  font-size: var(--su-h6-font-size, 1rem);
  font-weight: var(--su-h6-font-weight, var(--su-heading-font-weight, 700));
  line-height: var(--su-h6-line-height, 1.7);
  letter-spacing: var(--su-h6-letter-spacing, 0.02em);
  text-transform: var(--su-h6-text-transform, none);
  margin: 0;
}

/*----------  Links  ----------*/
a {
  color: var(--su-link-color, #2280de);
  text-decoration: none;
  transition: color 0.3s ease;
}
a:hover {
  color: var(--su-link-hover-color, #175c9e);
}
a:visited {
  color: var(--su-link-visited-color, #63a9ff);
}
a:active {
  color: var(--su-link-active-color, #175c9e);
}

/*----------  Buttons  ----------*/
button {
  font-family: var(--su-body-font-family, "Helvetica, Arial, sans-serif");
  font-size: var(--su-body-font-size, 16px);
  font-weight: var(--su-body-font-weight, 400);
  color: var(--su-btn-primary-color, #ffffff);
  background-color: var(--su-btn-primary-bg-color, #2280de);
  border: 1px solid var(--su-border-color, #c4c4c4);
  border-radius: 4px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}
button:hover {
  background-color: var(--su-btn-primary-bg-hover, #63a9ff);
}
button:disabled {
  color: var(--su-btn-disabled-color, #666666);
  background-color: var(--su-btn-disabled-bg-color, #c4c4c4);
  border-color: var(--su-border-color-disabled, #f5f5f5);
  cursor: not-allowed;
}

/*----------  Forms  ----------*/
input,
textarea,
select {
  font-family: var(--su-body-font-family, "Helvetica, Arial, sans-serif");
  font-size: var(--su-body-font-size, 16px);
  color: var(--dse-form-color, #000000);
  background-color: var(--dse-form-bg-color, #ffffff);
  border: 1px solid var(--dse-form-border-color, #c4c4c4);
  border-radius: 4px;
  padding: 0.5rem;
  transition: border-color 0.3s ease;
}
input:focus,
textarea:focus,
select:focus {
  border-color: var(--dse-form-border-focus-color, #28a745);
  outline: none;
}
input::placeholder,
textarea::placeholder,
select::placeholder {
  color: var(--dse-form-placeholder-color, #666666);
}

/*----------  Utility Classes  ----------*/
.mt-1 {
  margin-top: 1rem;
}

.mb-1 {
  margin-bottom: 1rem;
}

.pt-1 {
  padding-top: 1rem;
}

.pb-1 {
  padding-bottom: 1rem;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

/*=====  End of Atomic Styles  ======*/